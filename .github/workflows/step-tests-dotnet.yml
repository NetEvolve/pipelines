on:
  workflow_call:
    inputs:
      cache-restore-key:
        required: true
        type: string
      version-dotnet:
        required: true
        type: string
      solution:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true
      NUGET_TOKEN:
        required: true

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_NOLOGO: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

    name: Build & Test
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.version-dotnet }}

    - name: Load NuGet Cache
      uses: actions/cache@v3
      id: nuget-cache
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ inputs.cache-restore-key }}

    - name: Restore dependencies
      if: steps.nuget-cache.outputs.cache-hit != 'true'
      run: dotnet restore ${{ inputs.solution }}

    - name: Build
      run: dotnet build ${{ inputs.solution }} -c Release --no-restore

    - name: Test
      run: dotnet test ${{ inputs.solution }} -c Release --no-restore --collect:"XPlat Code Coverage"

    - name: Update codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
