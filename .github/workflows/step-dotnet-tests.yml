on:
  workflow_call:
    inputs:
      enableSonarQube:
        required: false
        type: boolean
        default: false
      disableCoverageUpload:
        required: false
        type: boolean
        default: false
      dotnet-logging:
        required: false
        type: string
        default: quiet
      dotnet-version:
        required: false
        type: string
        default: 7.x
      dotnet-quality:
        required: false
        type: string
        default: ga
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      solution:
        required: true
        type: string
      solution-version:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: false
      SONAR_ORGANIZATION:
        required: false
      SONAR_PROJECT:
        required: false
      SONAR_TOKEN:
        required: false
      FETCH_TOKEN:
        required: false

jobs:
  testing:
    name: Testing .NET solution
    runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
    env:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        token: ${{ secrets.FETCH_TOKEN || github.token }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
        dotnet-quality: ${{ inputs.dotnet-quality }}

    - name: Setup JDK 17
      if: ${{ inputs.enableSonarQube == true }}
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Install SonarCloud scanner
      if: ${{ inputs.enableSonarQube == true }}
      shell: pwsh
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Start SonarQube Analysis
      if: ${{ inputs.enableSonarQube == true }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        dotnet-sonarscanner begin /k:"${{ secrets.SONAR_PROJECT }}" /o:"${{ secrets.SONAR_ORGANIZATION }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/*.opencover.xml" /v:"${{ inputs.solution-version }}"

    - name: Restore dependencies
      run: dotnet restore ${{ inputs.solution }} -v ${{ inputs.dotnet-logging }}

    - name: Build
      run: dotnet build ${{ inputs.solution }} -c Release -v ${{ inputs.dotnet-logging || 'quiet' }} --no-restore /p:GeneratePackageOnBuild=false

    - name: Test
      id: test
      run: |
        dotnet test ${{ inputs.solution }} -c Release -v ${{ inputs.dotnet-logging }} --no-build --no-restore --collect:"XPlat Code Coverage" /p:GeneratePackageOnBuild=false -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2.16.1
      if: always()
      with:
        files: |
          **/TestResults/**/*.opencover.xml

    - name: Stop SonarQube Analysis
      if: ${{ inputs.enableSonarQube == true && (success() || steps.test.conclusion == 'failure') }}
      id: sonar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Update codecov
      uses: codecov/codecov-action@v4.5.0
      if: ${{ env.codecov_token != '' && (success() || steps.test.conclusion == 'failure' || steps.sonar.conclusion == 'skipped' ) }}
      with:
        token: ${{ env.codecov_token }}
        fail_ci_if_error: true

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: ${{ inputs.disableCoverageUpload == false }}
      with:
        name: "coverage"
        path: |
          **/TestResults/**/*.opencover.xml
