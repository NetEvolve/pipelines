on:
  workflow_call:
    inputs:
      enableSonarQube:
        required: false
        type: boolean
        default: false
      dotnet-logging:
        required: false
        type: string
        default: minimal
      dotnet-testfilter:
        required: false
        type: string
        default: ''
      dotnet-version:
        required: false
        type: string
        default: 7.x
      dotnet-quality:
        required: false
        type: string
        default: ga
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      solution:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: false
      SONAR_ORGANIZATION:
        required: false
      SONAR_PROJECT:
        required: false
      SONAR_TOKEN:
        required: false

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_NOLOGO: true

jobs:
  pretest:
    name: Prepare Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - name: Generate Matrix
        id: generate
        run: |
          if [ -z '${{ inputs.dotnet-testfilter }}' ]
          then
            echo "matrix=['none']" >> $GITHUB_OUTPUT
          else
            echo "matrix=${{ format('[{0}]', inputs.dotnet-testfilter) }}" >> $GITHUB_OUTPUT
          fi

  testing:
    name: Testing
    runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
    needs:
      - pretest
    env:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

    strategy:
      matrix:
        testfilter: ${{ fromJson(needs.pretest.outputs.matrix) }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
        dotnet-quality: ${{ inputs.dotnet-quality }}

    - name: Setup JDK 17
      if: ${{ inputs.enableSonarQube == true }}
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Install SonarCloud scanner
      if: ${{ inputs.enableSonarQube == true }}
      shell: pwsh
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Start SonarQube Analysis
      if: ${{ inputs.enableSonarQube == true }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        dotnet-sonarscanner begin /k:"${{ secrets.SONAR_PROJECT }}" /o:"${{ secrets.SONAR_ORGANIZATION }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/*.opencover.xml"

    - name: Restore dependencies
      run: dotnet restore ${{ inputs.solution }} -v ${{ inputs.dotnet-logging }}

    - name: Test
      id: test
      run: |
        if [ '${{ matrix.testfilter }}' == 'none' ]
        then
          dotnet test ${{ inputs.solution }} -c Release -v ${{ inputs.dotnet-logging }} --no-restore --collect:"XPlat Code Coverage" /p:GeneratePackageOnBuild=false -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        else
          dotnet test ${{ inputs.solution }} -c Release -v ${{ inputs.dotnet-logging }} --no-restore --collect:"XPlat Code Coverage" --filter "TestCategory=${{ matrix.testfilter }}" /p:GeneratePackageOnBuild=false -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        fi

    - name: Stop SonarQube Analysis
      if: ${{ inputs.enableSonarQube == true && (success() || steps.test.conclusion == 'failure') }}
      id: sonar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /v:${{ env.GitVersion_SemVer }}

    - name: Update codecov
      uses: codecov/codecov-action@v3
      if: ${{ env.codecov_token != '' && (success() || steps.test.conclusion == 'failure' || steps.sonar.conclusion == 'skipped' ) }}
      with:
        token: ${{ env.codecov_token }}
        fail_ci_if_error: true

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          **/TestResults/**/*.opencover.xml